#!/bin/bash

# This script generates the documentation by scanning the source code and extracting definitions and doc strings.

# Configuration
SRC_DIR="src"
DOC_DIR="docs"
SPHINX_DIR="sphinx"
SPHINX_APIDOC_DIR="autogenerated"
TRANSLATION_FILE="src/cms/locale/de/LC_MESSAGES/django.mo"

# Check if script is running as root
if [ $(id -u) = 0 ]; then
    # Check if script was invoked by the root user or with sudo
    if [ -z "${SUDO_USER}" ]; then
        echo "Please do not execute generate_documentation.sh as your root user because it would set the wrong file permissions of the documentation files." >&2
        exit 1
    else
        # Call this script again as the user who executed sudo
        sudo -u ${SUDO_USER} env PATH="${PATH}" $0
        # Exit with code of subprocess
        exit $?
    fi
fi

# check if jsdoc is contained in PATH enviroment variable
if ! command -v jsdoc &> /dev/null
then
    # because jsdoc is locally in venv installed, PATH must be explicitly set
	export PATH="$PATH:$(realpath $(dirname $BASH_SOURCE)/../node_modules/.bin)"
    echo $(realpath $(dirname $BASH_SOURCE)/../node_modules/.bin)
    echo $PATH
fi

cd $(dirname "${BASH_SOURCE}")/..

# Copy original footer file
cp $(pipenv --venv)/lib/python3.7/site-packages/sphinx_rtd_theme/footer.html ${SPHINX_DIR}/templates
# Patch footer to add hyperlinks to copyright information
if ! patch ${SPHINX_DIR}/templates/footer.html ${SPHINX_DIR}/patches/footer.diff; then
    echo -e "\nThe patch for the footer template could not be applied correctly." >&2
    echo "Presumably the upstream repository of sphinx_rtd_theme changed." >&2
    echo "Please adapt ${SPHINX_DIR}/patches/footer.diff to the upstream changes." >&2
    exit 1
fi

# Move german translation file to prevent sphinx from translating strings
if [[ -f "${TRANSLATION_FILE}" ]]; then
    mv "${TRANSLATION_FILE}" "${TRANSLATION_FILE}.lock"
fi

# Remove all old autogenerated rst and html files (in case source files have been deleted)
if [[ -d "${SPHINX_DIR}/${SPHINX_APIDOC_DIR}" ]]; then
    rm -r "${SPHINX_DIR}/${SPHINX_APIDOC_DIR}"
fi
if [[ -d "${DOC_DIR}" ]]; then
    rm -r "${DOC_DIR}"
fi

# Generate new .rst files from source code
export SPHINX_APIDOC_OPTIONS="members,show-inheritance"
pipenv run sphinx-apidoc --no-toc --module-first -o ${SPHINX_DIR}/${SPHINX_APIDOC_DIR} ${SRC_DIR} ${SRC_DIR}/cms/migrations ${SRC_DIR}/gvz_api/migrations

# Modify .rst files to remove unnecessary submodule- & subpackage-titles
# Example: "cms.models.push_notifications.push_notification_translation module" becomes "Push Notification Translation"
# At first, the 'find'-command returns all .rst files in the sphinx directory
# The sed pattern replacement is divided into five stages explained below:
find ${SPHINX_DIR}/${SPHINX_APIDOC_DIR} -type f -name "*.rst" | xargs sed -i \
    -e '/Submodules\|Subpackages/{N;d;}' `# Remove Sub-Headings including their following lines` \
    -e 's/\( module\| package\)//' `# Remove module & package strings at the end of headings` \
    -e '/^[^ ]\+$/s/\(.*\.\)\?\([^\.]\+\)/\u\2/' `# Remove module path in headings (separated by dots) and make first letter uppercase` \
    -e '/^[^ ]\+$/s/\\_\([a-z]\)/ \u\1/g' `# Replace \_ with spaces in headings and make following letter uppercase` \
    -e 's/Cms/CMS/g;s/Api/API/g;s/Poi/POI/g;s/Mfa/MFA/g;s/Pdf/PDF/g' # Make specific keywords uppercase

# Patch cms.rst to add the decorated functions
if ! patch ${SPHINX_DIR}/${SPHINX_APIDOC_DIR}/cms.rst ${SPHINX_DIR}/patches/cms.diff; then
    echo -e "\nThe patch for cms.rst could not be applied correctly." >&2
    echo "Presumably the structure of the cms package changed." >&2
    echo "Please adapt ${SPHINX_DIR}/patches/cms.diff to the structure changes." >&2
    exit 1
fi

# Compile .rst files to html documentation
pipenv run sphinx-build -j auto ${SPHINX_DIR} ${DOC_DIR}

# Move german translation file to original file again
if [[ -f "${TRANSLATION_FILE}.lock" ]]; then
    mv "${TRANSLATION_FILE}.lock" "${TRANSLATION_FILE}"
fi

# Remove temporary intermediate build files
rm -r docs/.doctrees
rm -r docs/_sources
rm docs/.buildinfo
